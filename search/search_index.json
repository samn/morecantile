{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Morecantile \u00b6 +-------------+-------------+ ymax | | | | x: 0 | x: 1 | | y: 0 | y: 0 | | z: 1 | z: 1 | | | | +-------------+-------------+ | | | | x: 0 | x: 1 | | y: 1 | y: 1 | | z: 1 | z: 1 | | | | +-------------+-------------+ ymin xmin xmax Construct and use map tile grids (a.k.a TileMatrixSet / TMS). Documentation : developmentseed.org/morecantile/ Source Code : developmentseed/morecantile Morecantile is like mercantile (the best tool to work with Web Mercator tile indexes), but with support for other TileMatrixSet grids. Morecantile follows the OGC Two Dimensional Tile Matrix Set specification found in http://docs.opengeospatial.org/is/17-083r2/17-083r2.html Note : Variable matrix width tile set are not supported. Install \u00b6 $ pip install -U pip $ pip install morecantile # Or install from source: $ pip install git+https://github.com/developmentseed/morecantile.git Defaults Grids \u00b6 CanadianNAD83_LCC : Lambert conformal conic NAD83 for Canada - EPSG:3978 EuropeanETRS89_LAEAQuad : ETRS89-extended / LAEA Europe - EPGS:3035 LINZAntarticaMapTilegrid : LINZ Antarctic Map Tile Grid (Ross Sea Region) - EPSG:5482 NZTM2000 : LINZ NZTM2000 Map Tile Grid - EPSG:2193 NZTM2000Quad : LINZ NZTM2000 Map Tile Grid - EPSG:2193 UPSAntarcticWGS84Quad : Universal Polar Stereographic WGS 84 Quad for Antarctic - EPSG:5042 UPSArcticWGS84Quad : Universal Polar Stereographic WGS 84 Quad for Arctic - EPSG:5041 UTM31WGS84Quad : Example of UTM grid - EPSG:32631 WebMercatorQuad : Spherical Mercator - EPGS:3857 (default grid for Web Mercator based maps) WGS1984Quad : EPSG:4326 for the World - EPGS:4326 (WGS84) WorldCRS84Quad : CRS84 for the World WorldMercatorWGS84Quad : Elliptical Mercator projection - EPGS:3395 ref: schemas.opengis.net/tms/1.0/json/examples/ Implementations \u00b6 rio-tiler : Create tile from raster using Morecantile TMS. timvt : A lightweight PostGIS based dynamic vector tile server. Changes \u00b6 See CHANGES.md . Contribution & Development \u00b6 See CONTRIBUTING.md License \u00b6 See LICENSE Authors \u00b6 Created by Development Seed","title":"Home"},{"location":"#morecantile","text":"+-------------+-------------+ ymax | | | | x: 0 | x: 1 | | y: 0 | y: 0 | | z: 1 | z: 1 | | | | +-------------+-------------+ | | | | x: 0 | x: 1 | | y: 1 | y: 1 | | z: 1 | z: 1 | | | | +-------------+-------------+ ymin xmin xmax Construct and use map tile grids (a.k.a TileMatrixSet / TMS). Documentation : developmentseed.org/morecantile/ Source Code : developmentseed/morecantile Morecantile is like mercantile (the best tool to work with Web Mercator tile indexes), but with support for other TileMatrixSet grids. Morecantile follows the OGC Two Dimensional Tile Matrix Set specification found in http://docs.opengeospatial.org/is/17-083r2/17-083r2.html Note : Variable matrix width tile set are not supported.","title":"Morecantile"},{"location":"#install","text":"$ pip install -U pip $ pip install morecantile # Or install from source: $ pip install git+https://github.com/developmentseed/morecantile.git","title":"Install"},{"location":"#defaults-grids","text":"CanadianNAD83_LCC : Lambert conformal conic NAD83 for Canada - EPSG:3978 EuropeanETRS89_LAEAQuad : ETRS89-extended / LAEA Europe - EPGS:3035 LINZAntarticaMapTilegrid : LINZ Antarctic Map Tile Grid (Ross Sea Region) - EPSG:5482 NZTM2000 : LINZ NZTM2000 Map Tile Grid - EPSG:2193 NZTM2000Quad : LINZ NZTM2000 Map Tile Grid - EPSG:2193 UPSAntarcticWGS84Quad : Universal Polar Stereographic WGS 84 Quad for Antarctic - EPSG:5042 UPSArcticWGS84Quad : Universal Polar Stereographic WGS 84 Quad for Arctic - EPSG:5041 UTM31WGS84Quad : Example of UTM grid - EPSG:32631 WebMercatorQuad : Spherical Mercator - EPGS:3857 (default grid for Web Mercator based maps) WGS1984Quad : EPSG:4326 for the World - EPGS:4326 (WGS84) WorldCRS84Quad : CRS84 for the World WorldMercatorWGS84Quad : Elliptical Mercator projection - EPGS:3395 ref: schemas.opengis.net/tms/1.0/json/examples/","title":"Defaults Grids"},{"location":"#implementations","text":"rio-tiler : Create tile from raster using Morecantile TMS. timvt : A lightweight PostGIS based dynamic vector tile server.","title":"Implementations"},{"location":"#changes","text":"See CHANGES.md .","title":"Changes"},{"location":"#contribution-development","text":"See CONTRIBUTING.md","title":"Contribution &amp; Development"},{"location":"#license","text":"See LICENSE","title":"License"},{"location":"#authors","text":"Created by Development Seed","title":"Authors"},{"location":"cli/","text":"Morecantile CLI \u00b6 The CLI is heavily inspired from mercantile's CLI. morecantile --help Usage: morecantile [OPTIONS] COMMAND [ARGS]... Command line interface for the Morecantile Python package. Options: -v, --verbose Increase verbosity. -q, --quiet Decrease verbosity. --version Show the version and exit. --help Show this message and exit. Commands: tiles Print tiles that overlap or contain a lng/lat point, bounding box, or GeoJSON objects. shapes Print the shapes of tiles as GeoJSON. custom Create Custom TileMatrixSet tms Print TileMatrixSet JSON document. tms-to-geojson Print TileMatrixSet MatrixSet as GeoJSON. Tiles \u00b6 With the tiles command you can write descriptions of tiles intersecting with a geographic point, bounding box, or GeoJSON object. $ morecantile tiles --help Usage: morecantile tiles [OPTIONS] [ZOOM] [INPUT] Lists TMS tiles at ZOOM level intersecting GeoJSON [west, south, east, north] bounding boxen, features, or collections read from stdin. Output is a JSON [x, y, z] array. Input may be a compact newline-delimited sequences of JSON or a pretty- printed ASCII RS-delimited sequence of JSON (like https://tools.ietf.org/html/rfc8142 and https://tools.ietf.org/html/rfc7159). Example: $ echo \"[-105.05, 39.95, -105, 40]\" | morecantiles tiles 12 Output: [852, 1550, 12] [852, 1551, 12] [853, 1550, 12] [853, 1551, 12] Options: --identifier TileMatrixSet identifier. One of : - LINZAntarticaMapTilegrid - EuropeanETRS89_LAEAQuad - CanadianNAD83_LCC - UPSArcticWGS84Quad - NZTM2000 - NZTM2000Quad - UTM31WGS84Quad - UPSAntarcticWGS84Quad - WorldMercatorWGS84Quad - WorldCRS84Quad - WGS1984Quad - WebMercatorQuad --seq / --lf Write a RS-delimited JSON sequence (default is LF). --help Show this message and exit. Shapes \u00b6 The shapes command writes TMS tile shapes to several forms of GeoJSON. $ morecantile shapes --help Usage: morecantile shapes [OPTIONS] [INPUT] Reads one or more Web Mercator tile descriptions from stdin and writes either a GeoJSON feature collection (the default) or a JSON sequence of GeoJSON features/collections to stdout. Input may be a compact newline-delimited sequences of JSON or a pretty- printed ASCII RS-delimited sequence of JSON (like https://tools.ietf.org/html/rfc8142 and https://tools.ietf.org/html/rfc7159). Tile descriptions may be either an [x, y, z] array or a JSON object of the form {\"tile\": [x, y, z], \"properties\": {\"name\": \"foo\", ...}} In the latter case, the properties object will be used to update the properties object of the output feature. Options: --identifier TileMatrixSet identifier. One of : - LINZAntarticaMapTilegrid - EuropeanETRS89_LAEAQuad - CanadianNAD83_LCC - UPSArcticWGS84Quad - NZTM2000 - NZTM2000Quad - UTM31WGS84Quad - UPSAntarcticWGS84Quad - WorldMercatorWGS84Quad - WorldCRS84Quad - WGS1984Quad - WebMercatorQuad --precision INTEGER Decimal precision of coordinates. --indent INTEGER Indentation level for JSON output --compact / --no-compact Use compact separators (',', ':'). --projected / --geographic Output coordinate system --seq Write a RS-delimited JSON sequence (default is LF). --feature Output as sequence of GeoJSON features (the default). --bbox Output as sequence of GeoJSON bbox arrays. --collect Output as a GeoJSON feature collections. --extents / --no-extents Write shape extents as ws-separated strings (default is False). --buffer FLOAT Shift shape x and y values by a constant number --help Show this message and exit. Custom \u00b6 With the custom command you can create custom TileMatrixSet documents. $ morecantile custom --help Usage: morecantile custom [OPTIONS] Create Custom TMS. Options: --epsg INTEGER EPSG number. [required] --extent FLOAT... left, bottom, right, top Bounding box of the Tile Matrix Set. [required] --name TEXT Identifier of the custom TMS. --minzoom INTEGER Minumum Zoom level. --maxzoom INTEGER Maximum Zoom level. --tile-width INTEGER Width of each tile. --tile-height INTEGER Height of each tile. --extent-epsg INTEGER EPSG number for the bounding box. --help Show this message and exit. tms \u00b6 The tms command returns the TileMatrixSet document $ morecantile tms --help Usage: morecantile tms [OPTIONS] Print TMS JSON. Options: --identifier TileMatrixSet identifier. One of : - LINZAntarticaMapTilegrid - EuropeanETRS89_LAEAQuad - CanadianNAD83_LCC - UPSArcticWGS84Quad - NZTM2000 - NZTM2000Quad - UTM31WGS84Quad - UPSAntarcticWGS84Quad - WorldMercatorWGS84Quad - WorldCRS84Quad - WGS1984Quad - WebMercatorQuad --help Show this message and exit. tms-to-geojson \u00b6 Create a GeoJSON from a TMS document $ morecantile tms-to-geojson --help Usage: morecantile tms-to-geojson [OPTIONS] [INPUT] Print TMS document as GeoJSON. Options: --level INTEGER Zoom/Matrix level. [required] --precision INTEGER Decimal precision of coordinates. --indent INTEGER Indentation level for JSON output --compact / --no-compact Use compact separators (',', ':'). --projected / --geographic Output coordinate system --seq Write a RS-delimited JSON sequence (default is LF). --feature Output as sequence of GeoJSON features (the default). --bbox Output as sequence of GeoJSON bbox arrays. --collect Output as a GeoJSON feature collections. --extents / --no-extents Write shape extents as ws-separated strings (default is False). --buffer FLOAT Shift shape x and y values by a constant number --help Show this message and exit. Examples \u00b6 $ rio bounds eu.tif| morecantile tiles --zoom 1 # like mercantiles $ morecantile custom --epsg 3413 --extent -4194300 -4194300 4194300 4194300 --minzoom 0 --maxzoom 8 --tile-width 512 --tile-height 512 | morecantile tms-to-geojson --level 3 --projected --collect > l3.geojson $ rio bounds eu.tif | morecantile tiles 4 --identifier EuropeanETRS89_LAEAQuad | morecantile shapes --identifier EuropeanETRS89_LAEAQuad --collect > z4.geojson","title":"CLI"},{"location":"cli/#morecantile-cli","text":"The CLI is heavily inspired from mercantile's CLI. morecantile --help Usage: morecantile [OPTIONS] COMMAND [ARGS]... Command line interface for the Morecantile Python package. Options: -v, --verbose Increase verbosity. -q, --quiet Decrease verbosity. --version Show the version and exit. --help Show this message and exit. Commands: tiles Print tiles that overlap or contain a lng/lat point, bounding box, or GeoJSON objects. shapes Print the shapes of tiles as GeoJSON. custom Create Custom TileMatrixSet tms Print TileMatrixSet JSON document. tms-to-geojson Print TileMatrixSet MatrixSet as GeoJSON.","title":"Morecantile CLI"},{"location":"cli/#tiles","text":"With the tiles command you can write descriptions of tiles intersecting with a geographic point, bounding box, or GeoJSON object. $ morecantile tiles --help Usage: morecantile tiles [OPTIONS] [ZOOM] [INPUT] Lists TMS tiles at ZOOM level intersecting GeoJSON [west, south, east, north] bounding boxen, features, or collections read from stdin. Output is a JSON [x, y, z] array. Input may be a compact newline-delimited sequences of JSON or a pretty- printed ASCII RS-delimited sequence of JSON (like https://tools.ietf.org/html/rfc8142 and https://tools.ietf.org/html/rfc7159). Example: $ echo \"[-105.05, 39.95, -105, 40]\" | morecantiles tiles 12 Output: [852, 1550, 12] [852, 1551, 12] [853, 1550, 12] [853, 1551, 12] Options: --identifier TileMatrixSet identifier. One of : - LINZAntarticaMapTilegrid - EuropeanETRS89_LAEAQuad - CanadianNAD83_LCC - UPSArcticWGS84Quad - NZTM2000 - NZTM2000Quad - UTM31WGS84Quad - UPSAntarcticWGS84Quad - WorldMercatorWGS84Quad - WorldCRS84Quad - WGS1984Quad - WebMercatorQuad --seq / --lf Write a RS-delimited JSON sequence (default is LF). --help Show this message and exit.","title":"Tiles"},{"location":"cli/#shapes","text":"The shapes command writes TMS tile shapes to several forms of GeoJSON. $ morecantile shapes --help Usage: morecantile shapes [OPTIONS] [INPUT] Reads one or more Web Mercator tile descriptions from stdin and writes either a GeoJSON feature collection (the default) or a JSON sequence of GeoJSON features/collections to stdout. Input may be a compact newline-delimited sequences of JSON or a pretty- printed ASCII RS-delimited sequence of JSON (like https://tools.ietf.org/html/rfc8142 and https://tools.ietf.org/html/rfc7159). Tile descriptions may be either an [x, y, z] array or a JSON object of the form {\"tile\": [x, y, z], \"properties\": {\"name\": \"foo\", ...}} In the latter case, the properties object will be used to update the properties object of the output feature. Options: --identifier TileMatrixSet identifier. One of : - LINZAntarticaMapTilegrid - EuropeanETRS89_LAEAQuad - CanadianNAD83_LCC - UPSArcticWGS84Quad - NZTM2000 - NZTM2000Quad - UTM31WGS84Quad - UPSAntarcticWGS84Quad - WorldMercatorWGS84Quad - WorldCRS84Quad - WGS1984Quad - WebMercatorQuad --precision INTEGER Decimal precision of coordinates. --indent INTEGER Indentation level for JSON output --compact / --no-compact Use compact separators (',', ':'). --projected / --geographic Output coordinate system --seq Write a RS-delimited JSON sequence (default is LF). --feature Output as sequence of GeoJSON features (the default). --bbox Output as sequence of GeoJSON bbox arrays. --collect Output as a GeoJSON feature collections. --extents / --no-extents Write shape extents as ws-separated strings (default is False). --buffer FLOAT Shift shape x and y values by a constant number --help Show this message and exit.","title":"Shapes"},{"location":"cli/#custom","text":"With the custom command you can create custom TileMatrixSet documents. $ morecantile custom --help Usage: morecantile custom [OPTIONS] Create Custom TMS. Options: --epsg INTEGER EPSG number. [required] --extent FLOAT... left, bottom, right, top Bounding box of the Tile Matrix Set. [required] --name TEXT Identifier of the custom TMS. --minzoom INTEGER Minumum Zoom level. --maxzoom INTEGER Maximum Zoom level. --tile-width INTEGER Width of each tile. --tile-height INTEGER Height of each tile. --extent-epsg INTEGER EPSG number for the bounding box. --help Show this message and exit.","title":"Custom"},{"location":"cli/#tms","text":"The tms command returns the TileMatrixSet document $ morecantile tms --help Usage: morecantile tms [OPTIONS] Print TMS JSON. Options: --identifier TileMatrixSet identifier. One of : - LINZAntarticaMapTilegrid - EuropeanETRS89_LAEAQuad - CanadianNAD83_LCC - UPSArcticWGS84Quad - NZTM2000 - NZTM2000Quad - UTM31WGS84Quad - UPSAntarcticWGS84Quad - WorldMercatorWGS84Quad - WorldCRS84Quad - WGS1984Quad - WebMercatorQuad --help Show this message and exit.","title":"tms"},{"location":"cli/#tms-to-geojson","text":"Create a GeoJSON from a TMS document $ morecantile tms-to-geojson --help Usage: morecantile tms-to-geojson [OPTIONS] [INPUT] Print TMS document as GeoJSON. Options: --level INTEGER Zoom/Matrix level. [required] --precision INTEGER Decimal precision of coordinates. --indent INTEGER Indentation level for JSON output --compact / --no-compact Use compact separators (',', ':'). --projected / --geographic Output coordinate system --seq Write a RS-delimited JSON sequence (default is LF). --feature Output as sequence of GeoJSON features (the default). --bbox Output as sequence of GeoJSON bbox arrays. --collect Output as a GeoJSON feature collections. --extents / --no-extents Write shape extents as ws-separated strings (default is False). --buffer FLOAT Shift shape x and y values by a constant number --help Show this message and exit.","title":"tms-to-geojson"},{"location":"cli/#examples","text":"$ rio bounds eu.tif| morecantile tiles --zoom 1 # like mercantiles $ morecantile custom --epsg 3413 --extent -4194300 -4194300 4194300 4194300 --minzoom 0 --maxzoom 8 --tile-width 512 --tile-height 512 | morecantile tms-to-geojson --level 3 --projected --collect > l3.geojson $ rio bounds eu.tif | morecantile tiles 4 --identifier EuropeanETRS89_LAEAQuad | morecantile shapes --identifier EuropeanETRS89_LAEAQuad --collect > z4.geojson","title":"Examples"},{"location":"contributing/","text":"Contributing \u00b6 Issues and pull requests are more than welcome. dev install $ git clone https://github.com/developmentseed/morecantile.git $ cd morecantile $ pip install -e . [ \"dev\" ] pre-commit \u00b6 This repo is set to use pre-commit to run isort , flake8 , pydocstring , black (\"uncompromising Python code formatter\") and mypy when committing new code. $ pre-commit install Docs \u00b6 $ git clone https://github.com/developmentseed/morecantile.git $ cd morecantile $ pip install -e . [ \"docs\" ] Hot-reloading docs: $ mkdocs serve To manually deploy docs (note you should never need to do this because Github Actions deploys automatically for new commits.): $ mkdocs gh-deploy","title":"Development - Contributing"},{"location":"contributing/#contributing","text":"Issues and pull requests are more than welcome. dev install $ git clone https://github.com/developmentseed/morecantile.git $ cd morecantile $ pip install -e . [ \"dev\" ]","title":"Contributing"},{"location":"contributing/#pre-commit","text":"This repo is set to use pre-commit to run isort , flake8 , pydocstring , black (\"uncompromising Python code formatter\") and mypy when committing new code. $ pre-commit install","title":"pre-commit"},{"location":"contributing/#docs","text":"$ git clone https://github.com/developmentseed/morecantile.git $ cd morecantile $ pip install -e . [ \"docs\" ] Hot-reloading docs: $ mkdocs serve To manually deploy docs (note you should never need to do this because Github Actions deploys automatically for new commits.): $ mkdocs gh-deploy","title":"Docs"},{"location":"release-notes/","text":"3.0.3 (2021-12-06) \u00b6 add WGS1984Quad ( WGS84/epgs:4326 ) TileMatrixSet ( developmentseed/morecantile!74 ) 3.0.2 (2021-11-12) \u00b6 add _geographic_crs definition in __init__ to make sure it's initialized from user input (author @davenquinn, developmentseed/morecantile!72 ) 3.0.1 (2021-11-10) \u00b6 rename _to_wgs84 and _from_wgs84 private attributes to _to_geographic and _from_geographic ( developmentseed/morecantile!68 ) add _geographic_crs private attribute to morecantile.TileMatrixSet to define the CRS used in _to_geographic and _from_geographic ( developmentseed/morecantile!68 ) fix TileMatrixSet._invert_axis method to only check axis information ( developmentseed/morecantile!71 ) 3.0.0 (2021-09-23) \u00b6 no change since 3.0.0a1 3.0.0a1 (2021-09-17) \u00b6 only import rasterio if needed ( developmentseed/morecantile!66 ) 3.0.0a0 (2021-09-09) \u00b6 add .rasterio_crs properties to TMS for compatibility with rasterio ( developmentseed/morecantile!58 ) Use new Class-like notation for namedtuple ( developmentseed/morecantile!58 ) breaking changes switch from rasterio to PyProj for CRS definition and projection transformation ( developmentseed/morecantile!58 ) remove python 3.6 supports (because of pyproj) 2.1.4 (2021-08-20) \u00b6 add NZTM2000Quad tile matrix set from LINZ (author @blacha, developmentseed/morecantile!57 ) add quadkey supports (@author adrian-knauer, developmentseed/morecantile!56 ) import morecantile tms = morecantile . tms . get ( \"WebMercatorQuad\" ) # Tile to Quadkey tms . quadkey ( 486 , 332 , 10 ) >>> \"0313102310\" # Quadkey to Tile tms . quadkey_to_tile ( \"0313102310\" ) >>> Tile ( 486 , 332 , 10 ) update NZTM2000* CRS uri from https://www.opengis.net/def/crs/EPSG/0/2193 to urn:ogc:def:crs:EPSG:2193 ( developmentseed/morecantile!61 ) 2.1.3 - Doesn't exists \u00b6 2.1.2 (2021-05-18) \u00b6 fix wrong TMS boundingBox definition when using inverted CRS ( developmentseed/morecantile!53 ) 2.1.1 (2021-05-17) \u00b6 remove mercantile dependency. raise PointOutsideTMSBounds warning when user is doing operations outside TMS bounds. fix wrong xy_bbox when tms.boundingBox use a specific CRS. 2.1.0 (2020-12-17) \u00b6 add zoom_level_strategy option for TileMatrixSet.zoom_for_res to match GDAL 3.2. By default, it is set to auto , meaning that it will select the closest zoom level. User can set the strategy to lower or upper to select below or above zoom levels. import morecantile tms = morecantile . tms . get ( \"WebMercatorQuad\" ) # native resolution of zoom 7 is 1222.9924 m # native resolution of zoom 8 is 611.4962 m assert tms . zoom_for_res ( 612.0 ) == 8 assert tms . zoom_for_res ( 612.0 , zoom_level_strategy = \"lower\" ) == 7 assert tms . zoom_for_res ( 612.0 , zoom_level_strategy = \"upper\" ) == 8 2.0.1 (2020-11-05) \u00b6 simplify morecantile.TileMatrixSet default representation from morecantile import tms tms . get ( \"WorldCRS84Quad\" ) >>> < TileMatrixSet title = 'CRS84 for the World' identifier = 'WorldCRS84Quad' > print ( tms . get ( \"WorldCRS84Quad\" ) . json ()) >>> { 'type' : 'TileMatrixSetType' , 'title' : 'CRS84 for the World' , 'abstract' : None , 'keywords' : None , 'identifier' : 'WorldCRS84Quad' , 'supportedCRS' : CRS . from_epsg ( 4326 ), 'wellKnownScaleSet' : AnyHttpUrl ( ... ), 'boundingBox' : { 'type' : 'BoundingBoxType' , 'crs' : CRS . from_epsg ( 4326 ), 'lowerCorner' : ( - 180.0 , - 90.0 ), 'upperCorner' : ( 180.0 , 90.0 )}, 'tileMatrix' : [ ... ] } 2.0.0 (2020-11-04) \u00b6 switch from CoordBBox to rasterio.coords.BoundingBox (ref: developmentseed/morecantile#38 ). update morecantile.commons Tile and Coords to match rasterio's BoundingBox. rename morecantile.models.BoundingBox to morecantile.models.TMSBoundingBox to avoind name colision with rasterio's BoundingBox. improve default TMS immutability by making morecantile.tms.register to return a new TileMatrixSets instance (ref: developmentseed/morecantile#37 ) import morecantile import TileMatrixSet , tms from rasterio.crs import CRS crs = CRS . from_epsg ( 3031 ) extent = [ - 948.75 , - 543592.47 , 5817.41 , - 3333128.95 ] # From https:///epsg.io/3031 custom_tms = TileMatrixSet . custom ( extent , crs , identifier = \"MyCustomTmsEPSG3031\" ) print ( len ( tms . list ())) >>> 10 defaults = tms . register ( custom_tms ) print ( len ( tms . list ())) >>> 10 print ( len ( defaults . list ())) >>> 11 1.3.1 (2020-10-07) \u00b6 remove pkg_resources ( pypa/setuptools#510 , developmentseed/morecantile!36 ) add TILEMATRIXSET_DIRECTORY to allow morecantile to load user's TMS # Save custom TMS to a file import morecantile from rasterio.crs import CRS crs = CRS . from_epsg ( 3031 ) extent = [ - 948.75 , - 543592.47 , 5817.41 , - 3333128.95 ] # From https:///epsg.io/3031 tms = morecantile . TileMatrixSet . custom ( extent , crs , identifier = \"MyCustomTmsEPSG3031\" ) with open ( \"/tmp/mytms/MyCustomTmsEPSG3031.json\" , \"w\" ) as f : f . write ( tms . json ( exclude_none = True )) import os os . environ [ \"TILEMATRIXSET_DIRECTORY\" ] = \"/tmp/mytms\" from morecantile import tms assert \"MyCustomTmsEPSG3031\" in tms . list () 1.3.0.post1 (2020-09-30) \u00b6 fix TileMatrixSet's model schema bug where pydantic wasn't able to translate Union[rasterio.crs.CRS, pydantic.AnyHttpUrl] to a valid schema (ref: developmentseed/morecantile#34 ) 1.3.0 (2020-09-30) \u00b6 Allow Custom CRS for custom TMS definition ( developmentseed/morecantile#23 ) Extend TMS beyond TMS Document max zoom level ( developmentseed/morecantile!28 ) Require rasterio >= 1.1.7 (sept 2020) to support inverted lat/lon TMS (ref: developmentseed/morecantile#26 ) Remove deprecated function Add tms.xy_bbox and tms.bbox properties to return TileMatrixSet boundaries. Add tms.intersect_tms to check if a bbox intersect with the TileMatrixSet boundaries. Avoid out-range tiles (e.g. negative indexes) Add tms.zoom_for_res function to get the TMS zoom level for a specific resolution ( developmentseed/morecantile#31 ). 1.2.0 (2020-06-01) \u00b6 add TileMatrixSet minzoom/maxzoom properties fix TileMatrixSet.tile calculation add TileMatrixSet.tiles function (replicat from mercantile) add buffer and projected options to TileMatrixSet.feature method removes mercantile as dependencies add CLI renamed morecantile.TileMatrixSet.point_towgs84 to morecantile.TileMatrixSet.lnglat (matches mercantile) renamed morecantile.TileMatrixSet.point_fromwgs84 to morecantile.TileMatrixSet.xy (matches mercantile) add truncate option in morecantile.TileMatrixSet.tile (matches mercantile) re-order buffer and precision options in morecantile.TileMatrixSet.feature (matches mercantile) uses mercantile's tests 1.1.1 (2020-05-15) \u00b6 Fix bad default TMS files ( developmentseed/morecantile#13 ) Add regex in model for identifier validation 1.1.0 (2020-05-13) \u00b6 better submodule definition add morecantile.tms object to access and register defaults TileMatrixSet Add depreciation warning for morecantile.TileMatrixSet.load method 1.0.0 (2020-05-11) \u00b6 Major refactor of Morecantile, which is now based on OGC TileMatrixSet JSON documents. use pydantic model to validate TMS JSON documents ( developmentseed/morecantile!6 , author @geospatial-jeff) morecantile methods are part of the TMS model ( developmentseed/morecantile!7 ) 0.1.0 (2020-02-03) \u00b6 Rename defaults grids ( developmentseed/morecantile#1 ) 0.0.1 (2020-01-23) \u00b6 Initial release","title":"Release"},{"location":"release-notes/#303-2021-12-06","text":"add WGS1984Quad ( WGS84/epgs:4326 ) TileMatrixSet ( developmentseed/morecantile!74 )","title":"3.0.3 (2021-12-06)"},{"location":"release-notes/#302-2021-11-12","text":"add _geographic_crs definition in __init__ to make sure it's initialized from user input (author @davenquinn, developmentseed/morecantile!72 )","title":"3.0.2 (2021-11-12)"},{"location":"release-notes/#301-2021-11-10","text":"rename _to_wgs84 and _from_wgs84 private attributes to _to_geographic and _from_geographic ( developmentseed/morecantile!68 ) add _geographic_crs private attribute to morecantile.TileMatrixSet to define the CRS used in _to_geographic and _from_geographic ( developmentseed/morecantile!68 ) fix TileMatrixSet._invert_axis method to only check axis information ( developmentseed/morecantile!71 )","title":"3.0.1 (2021-11-10)"},{"location":"release-notes/#300-2021-09-23","text":"no change since 3.0.0a1","title":"3.0.0 (2021-09-23)"},{"location":"release-notes/#300a1-2021-09-17","text":"only import rasterio if needed ( developmentseed/morecantile!66 )","title":"3.0.0a1 (2021-09-17)"},{"location":"release-notes/#300a0-2021-09-09","text":"add .rasterio_crs properties to TMS for compatibility with rasterio ( developmentseed/morecantile!58 ) Use new Class-like notation for namedtuple ( developmentseed/morecantile!58 ) breaking changes switch from rasterio to PyProj for CRS definition and projection transformation ( developmentseed/morecantile!58 ) remove python 3.6 supports (because of pyproj)","title":"3.0.0a0 (2021-09-09)"},{"location":"release-notes/#214-2021-08-20","text":"add NZTM2000Quad tile matrix set from LINZ (author @blacha, developmentseed/morecantile!57 ) add quadkey supports (@author adrian-knauer, developmentseed/morecantile!56 ) import morecantile tms = morecantile . tms . get ( \"WebMercatorQuad\" ) # Tile to Quadkey tms . quadkey ( 486 , 332 , 10 ) >>> \"0313102310\" # Quadkey to Tile tms . quadkey_to_tile ( \"0313102310\" ) >>> Tile ( 486 , 332 , 10 ) update NZTM2000* CRS uri from https://www.opengis.net/def/crs/EPSG/0/2193 to urn:ogc:def:crs:EPSG:2193 ( developmentseed/morecantile!61 )","title":"2.1.4 (2021-08-20)"},{"location":"release-notes/#213-doesnt-exists","text":"","title":"2.1.3 - Doesn't exists"},{"location":"release-notes/#212-2021-05-18","text":"fix wrong TMS boundingBox definition when using inverted CRS ( developmentseed/morecantile!53 )","title":"2.1.2 (2021-05-18)"},{"location":"release-notes/#211-2021-05-17","text":"remove mercantile dependency. raise PointOutsideTMSBounds warning when user is doing operations outside TMS bounds. fix wrong xy_bbox when tms.boundingBox use a specific CRS.","title":"2.1.1 (2021-05-17)"},{"location":"release-notes/#210-2020-12-17","text":"add zoom_level_strategy option for TileMatrixSet.zoom_for_res to match GDAL 3.2. By default, it is set to auto , meaning that it will select the closest zoom level. User can set the strategy to lower or upper to select below or above zoom levels. import morecantile tms = morecantile . tms . get ( \"WebMercatorQuad\" ) # native resolution of zoom 7 is 1222.9924 m # native resolution of zoom 8 is 611.4962 m assert tms . zoom_for_res ( 612.0 ) == 8 assert tms . zoom_for_res ( 612.0 , zoom_level_strategy = \"lower\" ) == 7 assert tms . zoom_for_res ( 612.0 , zoom_level_strategy = \"upper\" ) == 8","title":"2.1.0 (2020-12-17)"},{"location":"release-notes/#201-2020-11-05","text":"simplify morecantile.TileMatrixSet default representation from morecantile import tms tms . get ( \"WorldCRS84Quad\" ) >>> < TileMatrixSet title = 'CRS84 for the World' identifier = 'WorldCRS84Quad' > print ( tms . get ( \"WorldCRS84Quad\" ) . json ()) >>> { 'type' : 'TileMatrixSetType' , 'title' : 'CRS84 for the World' , 'abstract' : None , 'keywords' : None , 'identifier' : 'WorldCRS84Quad' , 'supportedCRS' : CRS . from_epsg ( 4326 ), 'wellKnownScaleSet' : AnyHttpUrl ( ... ), 'boundingBox' : { 'type' : 'BoundingBoxType' , 'crs' : CRS . from_epsg ( 4326 ), 'lowerCorner' : ( - 180.0 , - 90.0 ), 'upperCorner' : ( 180.0 , 90.0 )}, 'tileMatrix' : [ ... ] }","title":"2.0.1 (2020-11-05)"},{"location":"release-notes/#200-2020-11-04","text":"switch from CoordBBox to rasterio.coords.BoundingBox (ref: developmentseed/morecantile#38 ). update morecantile.commons Tile and Coords to match rasterio's BoundingBox. rename morecantile.models.BoundingBox to morecantile.models.TMSBoundingBox to avoind name colision with rasterio's BoundingBox. improve default TMS immutability by making morecantile.tms.register to return a new TileMatrixSets instance (ref: developmentseed/morecantile#37 ) import morecantile import TileMatrixSet , tms from rasterio.crs import CRS crs = CRS . from_epsg ( 3031 ) extent = [ - 948.75 , - 543592.47 , 5817.41 , - 3333128.95 ] # From https:///epsg.io/3031 custom_tms = TileMatrixSet . custom ( extent , crs , identifier = \"MyCustomTmsEPSG3031\" ) print ( len ( tms . list ())) >>> 10 defaults = tms . register ( custom_tms ) print ( len ( tms . list ())) >>> 10 print ( len ( defaults . list ())) >>> 11","title":"2.0.0 (2020-11-04)"},{"location":"release-notes/#131-2020-10-07","text":"remove pkg_resources ( pypa/setuptools#510 , developmentseed/morecantile!36 ) add TILEMATRIXSET_DIRECTORY to allow morecantile to load user's TMS # Save custom TMS to a file import morecantile from rasterio.crs import CRS crs = CRS . from_epsg ( 3031 ) extent = [ - 948.75 , - 543592.47 , 5817.41 , - 3333128.95 ] # From https:///epsg.io/3031 tms = morecantile . TileMatrixSet . custom ( extent , crs , identifier = \"MyCustomTmsEPSG3031\" ) with open ( \"/tmp/mytms/MyCustomTmsEPSG3031.json\" , \"w\" ) as f : f . write ( tms . json ( exclude_none = True )) import os os . environ [ \"TILEMATRIXSET_DIRECTORY\" ] = \"/tmp/mytms\" from morecantile import tms assert \"MyCustomTmsEPSG3031\" in tms . list ()","title":"1.3.1 (2020-10-07)"},{"location":"release-notes/#130post1-2020-09-30","text":"fix TileMatrixSet's model schema bug where pydantic wasn't able to translate Union[rasterio.crs.CRS, pydantic.AnyHttpUrl] to a valid schema (ref: developmentseed/morecantile#34 )","title":"1.3.0.post1 (2020-09-30)"},{"location":"release-notes/#130-2020-09-30","text":"Allow Custom CRS for custom TMS definition ( developmentseed/morecantile#23 ) Extend TMS beyond TMS Document max zoom level ( developmentseed/morecantile!28 ) Require rasterio >= 1.1.7 (sept 2020) to support inverted lat/lon TMS (ref: developmentseed/morecantile#26 ) Remove deprecated function Add tms.xy_bbox and tms.bbox properties to return TileMatrixSet boundaries. Add tms.intersect_tms to check if a bbox intersect with the TileMatrixSet boundaries. Avoid out-range tiles (e.g. negative indexes) Add tms.zoom_for_res function to get the TMS zoom level for a specific resolution ( developmentseed/morecantile#31 ).","title":"1.3.0 (2020-09-30)"},{"location":"release-notes/#120-2020-06-01","text":"add TileMatrixSet minzoom/maxzoom properties fix TileMatrixSet.tile calculation add TileMatrixSet.tiles function (replicat from mercantile) add buffer and projected options to TileMatrixSet.feature method removes mercantile as dependencies add CLI renamed morecantile.TileMatrixSet.point_towgs84 to morecantile.TileMatrixSet.lnglat (matches mercantile) renamed morecantile.TileMatrixSet.point_fromwgs84 to morecantile.TileMatrixSet.xy (matches mercantile) add truncate option in morecantile.TileMatrixSet.tile (matches mercantile) re-order buffer and precision options in morecantile.TileMatrixSet.feature (matches mercantile) uses mercantile's tests","title":"1.2.0 (2020-06-01)"},{"location":"release-notes/#111-2020-05-15","text":"Fix bad default TMS files ( developmentseed/morecantile#13 ) Add regex in model for identifier validation","title":"1.1.1 (2020-05-15)"},{"location":"release-notes/#110-2020-05-13","text":"better submodule definition add morecantile.tms object to access and register defaults TileMatrixSet Add depreciation warning for morecantile.TileMatrixSet.load method","title":"1.1.0 (2020-05-13)"},{"location":"release-notes/#100-2020-05-11","text":"Major refactor of Morecantile, which is now based on OGC TileMatrixSet JSON documents. use pydantic model to validate TMS JSON documents ( developmentseed/morecantile!6 , author @geospatial-jeff) morecantile methods are part of the TMS model ( developmentseed/morecantile!7 )","title":"1.0.0 (2020-05-11)"},{"location":"release-notes/#010-2020-02-03","text":"Rename defaults grids ( developmentseed/morecantile#1 )","title":"0.1.0 (2020-02-03)"},{"location":"release-notes/#001-2020-01-23","text":"Initial release","title":"0.0.1 (2020-01-23)"},{"location":"usage/","text":"List supported grids \u00b6 import morecantile print ( morecantile . tms . list ()) >>> [ 'LINZAntarticaMapTilegrid' , 'EuropeanETRS89_LAEAQuad' , 'CanadianNAD83_LCC' , 'UPSArcticWGS84Quad' , 'NZTM2000' , 'NZTM2000Quad' , 'UTM31WGS84Quad' , 'UPSAntarcticWGS84Quad' , 'WorldMercatorWGS84Quad' , 'WorldCRS84Quad' , 'WGS1984Quad' , 'WebMercatorQuad' ] Load one of the default grids \u00b6 import morecantile tms = morecantile . tms . get ( \"WebMercatorQuad\" ) tms >>> < TileMatrixSet title = 'Google Maps Compatible for the World' identifier = 'WebMercatorQuad' > Define custom grid \u00b6 import morecantile from pyproj import CRS crs = CRS . from_epsg ( 3031 ) extent = [ - 948.75 , - 543592.47 , 5817.41 , - 3333128.95 ] # From https:///epsg.io/3031 customEPGS3031 = morecantile . TileMatrixSet . custom ( extent , crs , identifier = \"MyCustomTmsEPSG3031\" ) print ( customEPGS3031 . matrix ( 0 ) . dict ( exclude_none = True )) >>> { \"type\" : \"TileMatrixType\" , \"identifier\" : \"0\" , \"scaleDenominator\" : 38916524.55357144 , \"topLeftCorner\" : [ - 948.75 , - 3333128.95 ], \"tileWidth\" : 256 , \"tileHeight\" : 256 , \"matrixWidth\" : 1 , \"matrixHeight\" : 1 } And register the TMS default_tms = morecantile . tms . register ( customEPGS3031 ) tms = default_tms . get ( \"MyCustomTmsEPSG3031\" ) tms >>> < TileMatrixSet title = 'Custom TileMatrixSet' identifier = 'MyCustomTmsEPSG3031' > Important starting with morecantile==1.3.0 , you can create TMS using custom CRS. import morecantile from pyproj import CRS crs = CRS . from_proj4 ( \"+proj=stere +lat_0=90 +lon_0=0 +k=2 +x_0=0 +y_0=0 +R=3396190 +units=m +no_defs\" ) extent = [ - 13584760.000 , - 13585240.000 , 13585240.000 , 13584760.000 ] tms = morecantile . TileMatrixSet . custom ( extent , crs , identifier = \"MarsNPolek2MOLA5k\" ) Create tile and get bounds \u00b6 import morecantile tms = morecantile . tms . get ( \"WebMercatorQuad\" ) # Get the bounds for tile Z=4, X=10, Y=10 in the input projection tms . xy_bounds ( morecantile . Tile ( 10 , 10 , 4 )) >>> BoundingBox ( left = 5009377.085697308 , bottom =- 7514065.628545959 , right = 7514065.628545959 , top =- 5009377.085697308 ) # Get the bounds for tile Z=4, X=10, Y=10 in LatLon (WGS84) tms . bounds ( morecantile . Tile ( 10 , 10 , 4 )) >>> BoundingBox ( left = 44.999999999999964 , bottom =- 55.776573018667634 , right = 67.4999999999999 , top =- 40.97989806962009 ) Find tile for lat/lon \u00b6 import morecantile tms = morecantile . tms . get ( \"WebMercatorQuad\" ) tms . tile ( 159.31 , - 42 , 4 ) >>> Tile ( x = 15 , y = 10 , z = 4 ) # Or using coordinates in input CRS x , y = tms . xy ( 159.31 , - 42 ) print ( x , y ) >>> ( 17734308.078276414 , - 5160979.444049781 ) tms . _tile ( x , y , 4 ) >>> Tile ( x = 15 , y = 10 , z = 4 ) Get Geojson Feature \u00b6 import morecantile tms = morecantile . tms . get ( \"WebMercatorQuad\" ) tms . feature ( morecantile . Tile ( 10 , 10 , 4 )) >>> { 'type' : 'Feature' , 'bbox' : [ 44.999999999999964 , - 55.776573018667634 , 67.4999999999999 , - 40.97989806962009 ], 'id' : 'Tile(x=10, y=10, z=4)' , 'geometry' : { 'type' : 'Polygon' , 'coordinates' : [[ [ 44.999999999999964 , - 55.776573018667634 ], [ 44.999999999999964 , - 40.97989806962009 ], [ 67.4999999999999 , - 40.97989806962009 ], [ 67.4999999999999 , - 55.776573018667634 ], [ 44.999999999999964 , - 55.776573018667634 ] ]] }, 'properties' : { 'title' : 'XYZ tile Tile(x=10, y=10, z=4)' , 'grid_name' : 'WebMercatorQuad' , 'grid_crs' : 'EPSG:3857' } } Morecantile + Pydantic \u00b6 Morecantile uses Pydantic to define and validate TileMatrixSet documents. From Pydantic docs: Define how data should be in pure, canonical python; validate it with pydantic. Pydantic model enforce the TileMatrixSet OGC specification for the whole project by validating each items. Because we use pydantic model to handle the TileMatrixSets you can uses pydantic's helper functions directly. import morecantile my_tms_doc = \"~/a_tms_doc.json\" tms = morecantile . TileMatrixSet . parse_file ( my_tms_doc )","title":"Usage"},{"location":"usage/#list-supported-grids","text":"import morecantile print ( morecantile . tms . list ()) >>> [ 'LINZAntarticaMapTilegrid' , 'EuropeanETRS89_LAEAQuad' , 'CanadianNAD83_LCC' , 'UPSArcticWGS84Quad' , 'NZTM2000' , 'NZTM2000Quad' , 'UTM31WGS84Quad' , 'UPSAntarcticWGS84Quad' , 'WorldMercatorWGS84Quad' , 'WorldCRS84Quad' , 'WGS1984Quad' , 'WebMercatorQuad' ]","title":"List supported grids"},{"location":"usage/#load-one-of-the-default-grids","text":"import morecantile tms = morecantile . tms . get ( \"WebMercatorQuad\" ) tms >>> < TileMatrixSet title = 'Google Maps Compatible for the World' identifier = 'WebMercatorQuad' >","title":"Load one of the default grids"},{"location":"usage/#define-custom-grid","text":"import morecantile from pyproj import CRS crs = CRS . from_epsg ( 3031 ) extent = [ - 948.75 , - 543592.47 , 5817.41 , - 3333128.95 ] # From https:///epsg.io/3031 customEPGS3031 = morecantile . TileMatrixSet . custom ( extent , crs , identifier = \"MyCustomTmsEPSG3031\" ) print ( customEPGS3031 . matrix ( 0 ) . dict ( exclude_none = True )) >>> { \"type\" : \"TileMatrixType\" , \"identifier\" : \"0\" , \"scaleDenominator\" : 38916524.55357144 , \"topLeftCorner\" : [ - 948.75 , - 3333128.95 ], \"tileWidth\" : 256 , \"tileHeight\" : 256 , \"matrixWidth\" : 1 , \"matrixHeight\" : 1 } And register the TMS default_tms = morecantile . tms . register ( customEPGS3031 ) tms = default_tms . get ( \"MyCustomTmsEPSG3031\" ) tms >>> < TileMatrixSet title = 'Custom TileMatrixSet' identifier = 'MyCustomTmsEPSG3031' > Important starting with morecantile==1.3.0 , you can create TMS using custom CRS. import morecantile from pyproj import CRS crs = CRS . from_proj4 ( \"+proj=stere +lat_0=90 +lon_0=0 +k=2 +x_0=0 +y_0=0 +R=3396190 +units=m +no_defs\" ) extent = [ - 13584760.000 , - 13585240.000 , 13585240.000 , 13584760.000 ] tms = morecantile . TileMatrixSet . custom ( extent , crs , identifier = \"MarsNPolek2MOLA5k\" )","title":"Define custom grid"},{"location":"usage/#create-tile-and-get-bounds","text":"import morecantile tms = morecantile . tms . get ( \"WebMercatorQuad\" ) # Get the bounds for tile Z=4, X=10, Y=10 in the input projection tms . xy_bounds ( morecantile . Tile ( 10 , 10 , 4 )) >>> BoundingBox ( left = 5009377.085697308 , bottom =- 7514065.628545959 , right = 7514065.628545959 , top =- 5009377.085697308 ) # Get the bounds for tile Z=4, X=10, Y=10 in LatLon (WGS84) tms . bounds ( morecantile . Tile ( 10 , 10 , 4 )) >>> BoundingBox ( left = 44.999999999999964 , bottom =- 55.776573018667634 , right = 67.4999999999999 , top =- 40.97989806962009 )","title":"Create tile and get bounds"},{"location":"usage/#find-tile-for-latlon","text":"import morecantile tms = morecantile . tms . get ( \"WebMercatorQuad\" ) tms . tile ( 159.31 , - 42 , 4 ) >>> Tile ( x = 15 , y = 10 , z = 4 ) # Or using coordinates in input CRS x , y = tms . xy ( 159.31 , - 42 ) print ( x , y ) >>> ( 17734308.078276414 , - 5160979.444049781 ) tms . _tile ( x , y , 4 ) >>> Tile ( x = 15 , y = 10 , z = 4 )","title":"Find tile for lat/lon"},{"location":"usage/#get-geojson-feature","text":"import morecantile tms = morecantile . tms . get ( \"WebMercatorQuad\" ) tms . feature ( morecantile . Tile ( 10 , 10 , 4 )) >>> { 'type' : 'Feature' , 'bbox' : [ 44.999999999999964 , - 55.776573018667634 , 67.4999999999999 , - 40.97989806962009 ], 'id' : 'Tile(x=10, y=10, z=4)' , 'geometry' : { 'type' : 'Polygon' , 'coordinates' : [[ [ 44.999999999999964 , - 55.776573018667634 ], [ 44.999999999999964 , - 40.97989806962009 ], [ 67.4999999999999 , - 40.97989806962009 ], [ 67.4999999999999 , - 55.776573018667634 ], [ 44.999999999999964 , - 55.776573018667634 ] ]] }, 'properties' : { 'title' : 'XYZ tile Tile(x=10, y=10, z=4)' , 'grid_name' : 'WebMercatorQuad' , 'grid_crs' : 'EPSG:3857' } }","title":"Get Geojson Feature"},{"location":"usage/#morecantile-pydantic","text":"Morecantile uses Pydantic to define and validate TileMatrixSet documents. From Pydantic docs: Define how data should be in pure, canonical python; validate it with pydantic. Pydantic model enforce the TileMatrixSet OGC specification for the whole project by validating each items. Because we use pydantic model to handle the TileMatrixSets you can uses pydantic's helper functions directly. import morecantile my_tms_doc = \"~/a_tms_doc.json\" tms = morecantile . TileMatrixSet . parse_file ( my_tms_doc )","title":"Morecantile + Pydantic"}]}